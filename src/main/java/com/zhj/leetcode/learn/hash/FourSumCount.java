package com.zhj.leetcode.learn.hash;

import java.util.HashMap;
import java.util.Map;

/**
 * 四数相加 II
 *
 * 给定四个包含整数的数组列表 A , B , C , D ,
 * 计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。
 *
 * 为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。
 * 所有整数的范围在 -2^28 到 2^28 - 1 之间，最终结果不会超过 2^31 - 1 。
 *
 * 例如:
 *
 * 输入:
 * A = [ 1, 2]
 * B = [-2,-1]
 * C = [-1, 2]
 * D = [ 0, 2]
 *
 * 输出:
 * 2
 *
 * 解释:
 * 两个元组如下:
 * 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
 * 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
 */
public class FourSumCount {

    /**
     * 思路就是，HashMap存前两个数组能组成的数字及其组成的次数，
     * 再遍历后两个数组，查看HashMap中是否存在两数和的相反数，
     * 如果存在，则记录出现次数，累加即为结果
     */
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {

        Map<Integer,Integer> map = new HashMap<>(A.length);
        for (int i = 0; i < A.length ; i++) {
            for (int j = 0; j < B.length ; j++) {
                int sum = A[i] + B[j];
                if (map.containsKey(sum)){
                    int count = map.get(sum);
                    map.put( sum , count + 1 );
                }else{
                    map.put( sum , 1 );
                }
            }
        }

        int count = 0 ;
        for (int i = 0; i < C.length ; i++) {
            for (int j = 0; j < D.length ; j++) {
                int target =  0 - C[i] - D[j] ;
                if (map.containsKey(target)){
                    count += map.get(target);
                }
            }
        }
        return count;
    }

    public static void main(String[] args) {

        long start = System.currentTimeMillis();

        int[] A = {-6,6,-19,-22,6,9,-2,-2,-7,3,-27,-1,-22,-21,-24,-14,-5,-21,4,-13,-27,-10,-17,-1,-15,10,-2,-18,-20,9,-2,-23,-10,3,0,-4,-16,-14,-11,4,4,-28,-13,8,-1,-26,-32,-8,10,-12,-32,-7,-8,-22,-13,-24,4,-12,-30,-2,-4,9,-24,-30,-2,-1,-13,-32,-23,-28,9,-13,6,-2,-20,2,10,0,-2,8,-14,-30,-15,-2,-2,0,-13,-19,-20,-24,-10,-7,2,-6,-18,-11,-2,9,-7,-7};
        int[] B = {3,-21,-3,-26,-14,-21,-29,-10,5,6,-18,-24,8,7,-19,-6,-11,-18,-22,-24,-10,-31,1,-25,4,1,-31,-9,-12,3,0,-32,1,7,-31,-17,-4,-11,2,0,-31,-23,-14,-27,-13,8,-24,-10,-8,-9,-4,-20,-14,-18,4,-17,-19,-18,-30,-27,-16,1,3,-30,-26,-16,-9,8,0,-1,0,-21,-15,2,-6,-16,-6,-4,-20,-23,-13,3,-22,-31,-11,-5,-29,-17,-3,-16,-5,5,7,-27,-25,-29,-32,-14,-5,-14};
        int[] C = {-9,9,-8,8,-13,-21,-10,8,-13,4,-13,10,-1,-17,-14,-28,-20,-7,5,-6,-23,-19,6,-13,10,-12,-24,1,-31,-30,-27,5,-23,-18,4,-23,-4,-4,-32,-12,-9,-9,-26,-24,2,-17,5,-26,-13,-11,-14,8,-31,2,-26,-1,-10,-8,-14,-14,6,-23,-25,2,-10,-27,-23,-5,-22,-2,-29,-30,-13,-14,0,10,-21,0,-28,-31,0,-16,-27,-14,8,-4,7,-23,-20,-12,-11,-28,-9,-3,-18,7,-8,-7,-13,-2};
        int[] D = {1,-5,-15,-13,8,0,-16,-12,-19,-3,7,-27,-18,8,-12,-27,-20,1,6,1,-22,-30,-20,-18,6,-30,-5,-23,-7,-4,-23,-5,-21,2,-26,-8,-21,10,-12,-22,-2,0,6,-25,-26,-4,3,3,-28,4,-29,-16,-31,6,-7,-11,-9,-6,-17,-1,-11,-15,-29,-9,6,-20,-22,1,-15,-3,-11,-17,-27,-5,5,-24,0,-26,9,8,-30,-24,-29,-10,-8,2,-23,-16,-25,8,-11,-24,-7,-16,-13,-10,-25,-17,-27,-15};

//        int[] A = {1, 2};
//        int[] B = {-2,-1};
//        int[] C = {-1, 2};
//        int[] D = {0, 2};

        System.out.println("count = " + new FourSumCount().fourSumCount(A,B,C,D));
        System.out.println("cost=" + (System.currentTimeMillis() - start));
    }
}
